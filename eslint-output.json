[{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/dummy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/agents/lintParser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/agents/postLintComments.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[760,763],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[760,763],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":89,"column":17,"nodeType":"BlockStatement","messageId":"unexpected","endLine":89,"endColumn":19,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[2643,2643],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":103,"column":11,"nodeType":"BlockStatement","messageId":"unexpected","endLine":103,"endColumn":13,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[2998,2998],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'fs';\nimport path from 'path';\nimport axios from 'axios';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst token = process.env.GITHUB_TOKEN!;\nconst repoFull = process.env.GITHUB_REPO!;\nconst [owner, repo] = repoFull.split('/');\nconst prNumber = parseInt(process.env.PR_NUMBER!, 10);\n\nconst headers = {\n  Authorization: `token ${token}`,\n  Accept: 'application/vnd.github+json',\n  'User-Agent': 'AgentPR-Bot',\n};\n\nconst results = JSON.parse(fs.readFileSync(path.resolve(__dirname, '../../eslint-output.json'), 'utf-8'));\nconst repoRoot = '/app';\n\nconst getChangedFiles = async () => {\n  const { data } = await axios.get(\n    `https://api.github.com/repos/${owner}/${repo}/pulls/${prNumber}/files`,\n    { headers }\n  );\n  return data.map((f: any) => ({ filename: f.filename, patch: f.patch }));\n};\n\nconst extractChangedLines = (patch: string): Set<number> => {\n  const changedLines = new Set<number>();\n  const lines = patch.split('\\n');\n  let newLine = 0;\n  for (const line of lines) {\n    if (line.startsWith('@@')) {\n      const match = /@@ -\\d+,\\d+ \\+(\\d+),?(\\d+)? @@/.exec(line);\n      if (match) newLine = parseInt(match[1], 10);\n      continue;\n    }\n    if (line.startsWith('+') && !line.startsWith('+++')) {\n      changedLines.add(newLine);\n      newLine++;\n    } else if (!line.startsWith('-')) {\n      newLine++;\n    }\n  }\n  return changedLines;\n};\n\n(async () => {\n  try {\n    const prRes = await axios.get(\n      `https://api.github.com/repos/${owner}/${repo}/pulls/${prNumber}`,\n      { headers }\n    );\n    const head_sha = prRes.data.head.sha;\n    const changedFiles = await getChangedFiles();\n\n    const fileToChangedLines = new Map<string, Set<number>>();\n    changedFiles.forEach((file) => {\n      fileToChangedLines.set(file.filename, extractChangedLines(file.patch));\n    });\n\n    let commentsPosted = 0;\n\n    for (const result of results) {\n      const filePath = path.relative(repoRoot, result.filePath);\n      const changedLines = fileToChangedLines.get(filePath);\n      if (!changedLines) continue;\n\n      for (const message of result.messages) {\n        if (!changedLines.has(message.line)) continue;\n\n        const commentBody = `Error: ${message.message}\\nRule: \\`${message.ruleId || 'n/a'}\\``;\n\n        try {\n          await axios.post(\n            `https://api.github.com/repos/${owner}/${repo}/pulls/${prNumber}/comments`,\n            {\n              body: commentBody,\n              commit_id: head_sha,\n              path: filePath,\n              line: message.line,\n              side: 'RIGHT',\n            },\n            { headers }\n          );\n          commentsPosted++;\n        } catch {}\n      }\n    }\n\n    if (commentsPosted === 0) {\n      await axios.post(\n        `https://api.github.com/repos/${owner}/${repo}/pulls/${prNumber}/reviews`,\n        {\n          event: 'COMMENT',\n          body: `Lint completed but no inline comments could be posted. Check \\`eslint-output.json\\`.`,\n        },\n        { headers }\n      );\n    }\n  } catch {}\n})();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/agents/triageAgent.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[164,167],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[164,167],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'testLint' is assigned a value but never used.","line":10,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { classifyRiskLevel } from '../utils/classifier';\nimport { postPRLabel } from '../services/githubService';\n\nexport const handlePullRequest = async (payload: any) => {\n  const prTitle = payload.pull_request.title;\n  const prBody = payload.pull_request.body || '';\n  const prNumber = payload.pull_request.number;\n  const repo = payload.repository.name;\n  const owner = payload.repository.owner.login;\n  const testLint = true; // temp line to trigger ESLint and PR diff\n\n\n\n  const risk = classifyRiskLevel(prTitle + ' ' + prBody);\n\n  await postPRLabel(owner, repo, prNumber, risk);\n  \n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/routes/github.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/services/githubService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[854,857],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[854,857],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport dotenv from 'dotenv';\n\ndotenv.config(); // Ensure this is called so env vars are loaded\n\nexport const postPRLabel = async (\n  owner: string,\n  repo: string,\n  prNumber: number,\n  label: string\n) => {\n  const token = process.env.GITHUB_TOKEN;\n  console.log('GitHub token:', token); \n\n  if (!token) {\n    throw new Error('GitHub token is missing. Check your .env file');\n  }\n\n  try {\n    const response = await axios.post(\n      `https://api.github.com/repos/${owner}/${repo}/issues/${prNumber}/labels`,\n      { labels: [label] },\n      {\n        headers: {\n          Authorization: `token ${token}`,\n          Accept: 'application/vnd.github+json',\n          'User-Agent': 'AgentPR-Bot'\n        }\n      }\n    );\n\n    console.log(`✅ Label \"${label}\" added to PR #${prNumber}`);\n    return response.data;\n  } catch (error: any) {\n    console.error('❌ Failed to add label:', error.response?.data || error.message);\n    throw error;\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/utils/classifier.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]