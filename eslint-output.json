[{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/dummy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/__tests__/sample.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/agents/coverageAgent.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2102,2105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2102,2105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'fs';\nimport path from 'path';\nimport axios from 'axios';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nexport async function runCoverageAgent() {\n  try {\n    const token = process.env.GITHUB_TOKEN!;\n    const repoFull = process.env.GITHUB_REPO!;\n    const [owner, repo] = repoFull.split('/');\n    const prNumber = parseInt(process.env.PR_NUMBER!, 10);\n\n    console.log('🔧 GITHUB_TOKEN:', token ? 'Present' : 'Missing');\n    console.log('🔧 GITHUB_REPO:', repoFull);\n    console.log('🔧 PR_NUMBER:', prNumber);\n\n    const headers = {\n      Authorization: `token ${token}`,\n      Accept: 'application/vnd.github+json',\n      'User-Agent': 'AgentPR-Bot',\n    };\n\n    const coveragePath = path.resolve(__dirname, '../../coverage/coverage-summary.json');\n    console.log('📄 Reading coverage from:', coveragePath);\n\n    const coverageRaw = fs.readFileSync(coveragePath, 'utf-8');\n    const coverage = JSON.parse(coverageRaw);\n    const total = coverage.total;\n\n    console.log('📊 Parsed Coverage:', total);\n\n    const formatPercent = (value: unknown) => {\n      const num = typeof value === 'number' ? value : 0;\n      return `${num.toFixed(2)}%`;\n    };\n\n    const message = `\n📊 **Test Coverage Report**\n- **Lines:** ${formatPercent(total.lines.pct)}\n- **Statements:** ${formatPercent(total.statements.pct)}\n- **Functions:** ${formatPercent(total.functions.pct)}\n- **Branches:** ${formatPercent(total.branches.pct)}\n`;\n\n    console.log('🧠 Comment Message Prepared:\\n', message);\n\n    // Sanity check PR existence\n    const prCheck = await axios.get(\n      `https://api.github.com/repos/${owner}/${repo}/pulls/${prNumber}`,\n      { headers }\n    );\n    console.log('✅ PR exists, PR title:', prCheck.data.title);\n\n    const commentUrl = `https://api.github.com/repos/${owner}/${repo}/issues/${prNumber}/comments`;\n    console.log('📤 Posting comment to:', commentUrl);\n\n    const response = await axios.post(\n      commentUrl,\n      { body: message },\n      { headers }\n    );\n\n    console.log('✅ Coverage comment posted successfully. Comment ID:', response.data.id);\n  } catch (error: any) {\n    console.error('❌ Failed to post test coverage comment.');\n    if (error.response) {\n      console.error('Status:', error.response.status);\n      console.error('URL:', error.config?.url);\n      console.error('Response data:', JSON.stringify(error.response.data, null, 2));\n    } else {\n      console.error('Error:', error.message);\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/agents/lintParser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/agents/postLintComments.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'temp' is assigned a value but never used.","line":9,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[167,170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[167,170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1162,1165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1162,1165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'relativePath' is never reassigned. Use 'const' instead.","line":85,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":85,"endColumn":23,"fix":{"range":[2481,2561],"text":"const relativePath = path.relative(repoRoot, result.filePath).replace(/\\\\/g, '/');"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3832,3835],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3832,3835],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":145,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4460,4463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4460,4463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import fs from 'fs';\nimport path from 'path';\nimport axios from 'axios';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\n// Intentional lint error to test\nconst temp: any = 'trigger error';\n\nexport async function runLintAgent() {\n  const token = process.env.GITHUB_TOKEN!;\n  const repoFull = process.env.GITHUB_REPO!;\n  const [owner, repo] = repoFull.split('/');\n  const prNumber = parseInt(process.env.PR_NUMBER!, 10);\n\n  console.log('🔧 Debug: repo =', repo);\n  console.log('🔧 Debug: owner =', owner);\n  console.log('🔧 Debug: prNumber =', prNumber);\n\n  const headers = {\n    Authorization: `token ${token}`,\n    Accept: 'application/vnd.github+json',\n    'User-Agent': 'AgentPR-Bot',\n  };\n\n  const results = JSON.parse(\n    fs.readFileSync(path.resolve(__dirname, '../../eslint-output.json'), 'utf-8')\n  );\n\n  const repoRoot = path.resolve(__dirname, '../../');\n  console.log('📁 Resolved repo root:', repoRoot);\n\n  const getChangedFiles = async () => {\n    const { data } = await axios.get(\n      `https://api.github.com/repos/${owner}/${repo}/pulls/${prNumber}/files`,\n      { headers }\n    );\n    console.log('🗂 PR changed files:');\n    data.forEach((f: any) => console.log('  •', f.filename));\n    return data.map((f: { filename: string; patch: string }) => ({\n      filename: f.filename,\n      patch: f.patch,\n    }));\n  };\n\n  const extractChangedLines = (patch: string): Set<number> => {\n    const changedLines = new Set<number>();\n    const lines = patch.split('\\n');\n    let newLine = 0;\n    for (const line of lines) {\n      if (line.startsWith('@@')) {\n        const match = /@@ -\\d+,\\d+ \\+(\\d+),?(\\d+)? @@/.exec(line);\n        if (match) newLine = parseInt(match[1], 10);\n        continue;\n      }\n      if (line.startsWith('+') && !line.startsWith('+++')) {\n        changedLines.add(newLine);\n        newLine++;\n      } else if (!line.startsWith('-')) {\n        newLine++;\n      }\n    }\n    return changedLines;\n  };\n\n  try {\n    const prRes = await axios.get(\n      `https://api.github.com/repos/${owner}/${repo}/pulls/${prNumber}`,\n      { headers }\n    );\n    const head_sha = prRes.data.head.sha;\n    console.log('🔧 Debug: commit SHA =', head_sha);\n\n    const changedFiles = await getChangedFiles();\n\n    const fileToChangedLines = new Map<string, Set<number>>();\n    changedFiles.forEach((file) => {\n      fileToChangedLines.set(file.filename, extractChangedLines(file.patch));\n    });\n\n    let commentsPosted = 0;\n\n    for (const result of results) {\n      let relativePath = path.relative(repoRoot, result.filePath).replace(/\\\\/g, '/');\n\n      // Normalize path to match GitHub PR diff format exactly\n      const match = relativePath.match(/AgentPR\\/(src\\/.+\\.ts)$/);\n      const filePath = match ? match[1] : relativePath;\n      console.log('🧪 Normalized file path for GitHub:', filePath);\n\n      if (!fileToChangedLines.has(filePath)) {\n        console.log('🚫 Skipping file not in PR diff:', filePath);\n        continue;\n      }\n\n      const changedLines = fileToChangedLines.get(filePath)!;\n\n      for (const message of result.messages) {\n        if (!changedLines.has(message.line)) {\n          console.log(`🔕 Skipping unchanged line ${message.line}`);\n          continue;\n        }\n\n        const commentBody = `Error: ${message.message}\\nRule: \\`${message.ruleId || 'n/a'}\\``;\n\n        try {\n          const postUrl = `https://api.github.com/repos/${owner}/${repo}/pulls/${prNumber}/comments`;\n          console.log(`📤 Inline comment to ${filePath}:${message.line}`);\n\n          await axios.post(\n            postUrl,\n            {\n              body: commentBody,\n              commit_id: head_sha,\n              path: filePath,\n              line: message.line,\n              side: 'RIGHT',\n            },\n            { headers }\n          );\n          commentsPosted++;\n        } catch (error: any) {\n          console.warn(\n            `❌ Failed to comment on ${filePath}:${message.line}`,\n            error.response?.data?.message || error.message\n          );\n        }\n      }\n    }\n\n    if (commentsPosted === 0) {\n      const fallbackUrl = `https://api.github.com/repos/${owner}/${repo}/issues/${prNumber}/comments`;\n      console.log(`📤 Fallback comment to ${fallbackUrl}`);\n      await axios.post(\n        fallbackUrl,\n        {\n          body: '✅ Lint completed, but no inline comments were necessary.',\n        },\n        { headers }\n      );\n    }\n\n    console.log('✅ Lint Agent finished.');\n  } catch (error: any) {\n    console.error(\n      '❌ Lint Agent error:',\n      error.response?.data?.message || error.message\n    );\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/agents/triageAgent.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[247,250],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[247,250],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { classifyRiskLevel } from '../utils/classifier';\nimport { postPRLabel } from '../services/githubService';\n\n/**\n * Triage Agent: classifies PRs based on title/body and applies risk label\n */\nexport async function handlePullRequest(payload: any) {\n  const prTitle = payload.pull_request.title;\n  const prBody = payload.pull_request.body || '';\n  const prNumber = payload.pull_request.number;\n  const repo = payload.repository.name;\n  const owner = payload.repository.owner.login;\n\n  const risk = classifyRiskLevel(`${prTitle} ${prBody}`);\n  await postPRLabel(owner, repo, prNumber, risk);\n\n  console.log(`✅ Applied label: ${risk}`);\n}\n\n\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/routes/github.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/services/githubService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[854,857],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[854,857],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport dotenv from 'dotenv';\n\ndotenv.config(); // Ensure this is called so env vars are loaded\n\nexport const postPRLabel = async (\n  owner: string,\n  repo: string,\n  prNumber: number,\n  label: string\n) => {\n  const token = process.env.GITHUB_TOKEN;\n  console.log('GitHub token:', token); \n\n  if (!token) {\n    throw new Error('GitHub token is missing. Check your .env file');\n  }\n\n  try {\n    const response = await axios.post(\n      `https://api.github.com/repos/${owner}/${repo}/issues/${prNumber}/labels`,\n      { labels: [label] },\n      {\n        headers: {\n          Authorization: `token ${token}`,\n          Accept: 'application/vnd.github+json',\n          'User-Agent': 'AgentPR-Bot'\n        }\n      }\n    );\n\n    console.log(`✅ Label \"${label}\" added to PR #${prNumber}`);\n    return response.data;\n  } catch (error: any) {\n    console.error('❌ Failed to add label');\n    if (error.response) {\n      console.error('Status:', error.response.status);\n      console.error('Headers:', error.response.headers);\n      console.error('Data:', error.response.data);\n    } else if (error.request) {\n      console.error('No response received:', error.request);\n    } else {\n      console.error('Error setting up request:', error.message);\n    }\n    throw error;\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/utils/classifier.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/utils/math.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]