[{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/dummy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/agents/lintParser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/agents/postLintComments.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":8,"column":15,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":8,"endColumn":40},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":9,"column":18,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":9,"endColumn":42},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1179,1182],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1179,1182],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'fs';\nimport path from 'path';\nimport { Octokit } from '@octokit/rest';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst token = process.env.GITHUB_TOKEN!;\nconst repoFull = process.env.GITHUB_REPO!;\nconst [owner, repo] = repoFull.split('/');\nconst prNumber = 3; // TODO: change this to the PR number you want to test with\n\nconst octokit = new Octokit({ auth: token });\n\nconst lintPath = path.resolve(__dirname, '../../eslint-output.json');\nconst results = JSON.parse(fs.readFileSync(lintPath, 'utf-8'));\n\n(async () => {\n  for (const result of results) {\n    const filePath = result.filePath.replace(`${process.cwd()}/`, '');\n\n    for (const message of result.messages) {\n      const body = `**${message.severity === 2 ? '❌ Error' : '⚠️ Warning'}**: ${message.message}\\nRule: \\`${message.ruleId || 'n/a'}\\``;\n\n      try {\n        await octokit.pulls.createReview({\n            owner,\n            repo,\n            pull_number: prNumber,\n            event: 'COMMENT',\n            body: `Lint warning in \\`${filePath}:${message.line}\\`:\\n\\n${body}`\n          });\n          \n\n        console.log(`✅ Commented on ${filePath}:${message.line}`);\n      } catch (err: any) {\n        console.error(`⚠️ Failed to comment on ${filePath}:${message.line}`, err.message);\n      }\n    }\n  }\n})();\n","usedDeprecatedRules":[{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/agents/triageAgent.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[164,167],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[164,167],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { classifyRiskLevel } from '../utils/classifier';\nimport { postPRLabel } from '../services/githubService';\n\nexport const handlePullRequest = async (payload: any) => {\n  const prTitle = payload.pull_request.title;\n  const prBody = payload.pull_request.body || '';\n  const prNumber = payload.pull_request.number;\n  const repo = payload.repository.name;\n  const owner = payload.repository.owner.login;\n\n  const risk = classifyRiskLevel(prTitle + ' ' + prBody);\n\n  await postPRLabel(owner, repo, prNumber, risk);\n};\n","usedDeprecatedRules":[{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/routes/github.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/services/githubService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[854,857],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[854,857],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport dotenv from 'dotenv';\n\ndotenv.config(); // Ensure this is called so env vars are loaded\n\nexport const postPRLabel = async (\n  owner: string,\n  repo: string,\n  prNumber: number,\n  label: string\n) => {\n  const token = process.env.GITHUB_TOKEN;\n  console.log('GitHub token:', token); \n\n  if (!token) {\n    throw new Error('GitHub token is missing. Check your .env file');\n  }\n\n  try {\n    const response = await axios.post(\n      `https://api.github.com/repos/${owner}/${repo}/issues/${prNumber}/labels`,\n      { labels: [label] },\n      {\n        headers: {\n          Authorization: `token ${token}`,\n          Accept: 'application/vnd.github+json',\n          'User-Agent': 'AgentPR-Bot'\n        }\n      }\n    );\n\n    console.log(`✅ Label \"${label}\" added to PR #${prNumber}`);\n    return response.data;\n  } catch (error: any) {\n    console.error('❌ Failed to add label:', error.response?.data || error.message);\n    throw error;\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/sreebhargav/AgentPR/AgentPR/src/utils/classifier.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]